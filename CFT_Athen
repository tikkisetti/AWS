AWSTemplateFormatVersion: 2010-09-09
Resources:
    GlueDatabase:
        Type: AWS::Glue::Database
        Properties: 
          CatalogId: !Ref AWS::AccountId
          DatabaseInput: 
            Description: test database from cf
            LocationUri: s3://sai-src-bucket/plaintext
            Name: sai_test_db_cf
    GlueTable:
        Type: AWS::Glue::Table
        Properties: 
          CatalogId: !Ref AWS::AccountId
          DatabaseName: !Ref GlueDatabase
          TableInput: 
              Name: sai_test_table_cf
              PartitionKeys:
                  - Name: year
                    Type: int
                  - Name: month
                    Type: int
                  - Name: day
                    Type: int
              StorageDescriptor: 
                Columns: 
                  - Name: request_timestamp
                    Type: string
                  - Name: elb_name
                    Type: string
                  - Name: request_ip
                    Type: string
                  - Name: request_port
                    Type: int
                  - Name: backend_port
                    Type: int
                  - Name: request_processing_time
                    Type: double
                  - Name: backend_processing_time
                    Type: double
                  - Name: client_response_time
                    Type: double
                  - Name: elb_response_code
                    Type: string
                  - Name: backend_ip
                    Type: string
                  - Name: backend_response_code
                    Type: string
                  - Name: received_bytes
                    Type: bigint
                  - Name: sent_bytes
                    Type: bigint
                  - Name: request_verb
                    Type: string
                  - Name: url
                    Type: string
                  - Name: protocol
                    Type: string
                  - Name: user_agent
                    Type: string
                  - Name: ssl_cipher
                    Type: string
                  - Name: ssl_protocol
                    Type: string
                InputFormat: org.apache.hadoop.mapred.TextInputFormat
                OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                Location: s3://sai-src-bucket/plaintext
                SerdeInfo: 
                    SerializationLibrary: org.apache.hadoop.hive.serde2.RegexSerDe
                    Parameters:
                        serialization.format: 1
                        input.regex: ([^ ]*) ([^ ]*) ([^ ]*):([0-9]*) ([^ ]*)[:-]([0-9]*) ([-.0-9]*) ([-.0-9]*) ([-.0-9]*) (|[-0-9]*) (-|[-0-9]*) ([-0-9]*) ([-0-9]*) \"([^ ]*) ([^ ]*) (- |[^ ]*)\" ("[^"]*") ([A-Z0-9-]+) ([A-Za-z0-9.-]*)$
              TableType: EXTERNAL_TABLE
              
              
              
              import json
import logging
from botocore.vendored import requests
import boto3

def lambda_handler(event, context):
    client = boto3.client('athena')
    print(event)
    responseData = {}
    # TODO implement
    response = client.create_work_group(
    Name='test_worgroup',
    Configuration={
        'ResultConfiguration': {
            'OutputLocation': 's3://sai-test3/results',
            
        },
        'EnforceWorkGroupConfiguration': True,
        'PublishCloudWatchMetricsEnabled': True
        
    },
    Description='This workgroup is to store results of the new athena table'
    
    )
    send(event, context, 'SUCCESS', responseData)
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!') 
        
        
    }

def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
    print(event)
    responseUrl = event['ResponseURL']
    print(responseUrl)
    
    responseBody = {}
    responseBody['Status'] = responseStatus
    responseBody['Reason'] = 'See the details in cloudWatch Log Stream: '+context.log_stream_name
    responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
    responseBody['StackId'] = event['StackId']
    responseBody['RequestId'] = event['RequestId']
    responseBody['LogicalResourceId'] = event['LogicalResourceId']
    responseBody['NoEcho'] = noEcho
    responseBody['Data'] = responseData
    
    json_responseBody = json.dumps(responseBody)
    print("Response body:\n"+json_responseBody)
    
    headers ={
        'content-type' : '',
        'content-length' : str(len(json_responseBody))
    }

    try:
        response = requests.put(responseUrl,
                                data=json_responseBody,
                                headers=headers)
        print('Status Code: '+response.reason)
    except Exception as e:
        print("send(..) failed executing requests.put(..):" + str(e))
